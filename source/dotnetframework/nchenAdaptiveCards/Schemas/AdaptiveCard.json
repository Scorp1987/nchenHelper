{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "id": "http://adaptivecards.io/schemas/adaptive-card.json",
  "definitions": {
    "AdaptiveCard": {
      "description": "An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "enum": [
            "AdaptiveCard"
          ],
          "description": "Must be `AdaptiveCard`"
        },
        "version": {
          "type": "string",
          "description": "Schema version that this card requires. If a client is **lower** than this version, the `fallbackText` will be rendered. NOTE: Version is not required for cards within an `Action.ShowCard`. However, it *is* required for the top-level card.",
          "examples": [
            "1.0",
            "1.1",
            "1.2"
          ]
        },
        "body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImplementationsOf.Element"
          },
          "description": "The card elements to show in the primary card region."
        },
        "$schema": {
          "type": "string",
          "format": "uri",
          "description": "The Adaptive Card schema."
        }
      }
    },
    "Container": {
      "description": "Containers group items together.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "enum": [
            "Container"
          ],
          "description": "Must be `Container`"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImplementationsOf.Element"
          },
          "description": "The card elements to render inside the `Container`."
        }
      },
      "required": [
        "items"
      ]
    },
    "Fact": {
      "description": "Describes a Fact in a FactSet as a key/value pair.",
      "properties": {
        "type": {
          "enum": [
            "Fact"
          ],
          "description": "Must be `Fact`"
        },
        "title": {
          "type": "string",
          "description": "The title of the fact."
        },
        "value": {
          "type": "string",
          "description": "The value of the fact."
        }
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "title",
        "value"
      ]
    },
    "FactSet": {
      "description": "The FactSet element displays a series of facts (i.e. name/value pairs) in a tabular form.",
      "properties": {
        "type": {
          "enum": [
            "FactSet"
          ],
          "description": "Must be `FactSet`"
        },
        "facts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fact"
          },
          "description": "The array of `Fact`'s."
        },
        "fallback": {},
        "height": {},
        "separator": {},
        "spacing": {},
        "id": {},
        "isVisible": {},
        "requires": {}
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "facts"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.Element"
        }
      ]
    },
    "TextRun": {
      "description": "Defines a single run of formatted text. A TextRun with no properties set can be represented in the json as string containing the text as a shorthand for the json object. These two representations are equivalent.",
      "version": "1.2",
      "anyOf": [
        {
          "type": "string",
          "description": "Text to display. Markdown is not supported."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "TextRun"
              ],
              "description": "Must be `TextRun`"
            },
            "text": {
              "type": "string",
              "description": "Text to display. Markdown is not supported."
            },
            "color": {
              "$ref": "#/definitions/Colors",
              "description": "Controls the color of the text."
            },
            "fontType": {
              "$ref": "#/definitions/FontType",
              "description": "The type of font to use"
            },
            "highlight": {
              "type": "boolean",
              "description": "If `true`, displays the text highlighted."
            },
            "isSubtle": {
              "type": "boolean",
              "description": "If `true`, displays text slightly toned down to appear less prominent.",
              "default": false
            },
            "italic": {
              "type": "boolean",
              "description": "If `true`, displays the text using italic font."
            },
            "selectAction": {
              "$ref": "#/definitions/ImplementationsOf.ISelectAction",
              "description": "Action to invoke when this text run is clicked. Visually changes the text run into a hyperlink. `Action.ShowCard` is not supported."
            },
            "size": {
              "$ref": "#/definitions/FontSize",
              "description": "Controls size of text."
            },
            "strikethrough": {
              "type": "boolean",
              "description": "If `true`, displays the text with strikethrough."
            },
            "underline": {
              "type": "boolean",
              "description": "If `true`, displays the text with an underline.",
              "version": "1.3"
            },
            "weight": {
              "$ref": "#/definitions/FontWeight",
              "description": "Controls the weight of the text."
            }
          },
          "required": [
            "text"
          ],
          "additionalProperties": false
        }
      ]
    },
    "RichTextBlock": {
      "description": "Defines an array of inlines, allowing for inline text formatting.",
      "version": "1.2",
      "features": [
        1933
      ],
      "properties": {
        "type": {
          "enum": [
            "RichTextBlock"
          ],
          "description": "Must be `RichTextBlock`"
        },
        "inlines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImplementationsOf.Inline"
          },
          "description": "The array of inlines."
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment",
          "description": "Controls the horizontal text alignment."
        },
        "fallback": {},
        "height": {},
        "separator": {},
        "spacing": {},
        "id": {},
        "isVisible": {},
        "requires": {}
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "inlines"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.Element"
        }
      ]
    },
    "TextBlock": {
      "description": "Displays text, allowing control over font sizes, weight, and color.",
      "properties": {
        "type": {
          "enum": [
            "TextBlock"
          ],
          "description": "Must be `TextBlock`"
        },
        "text": {
          "type": "string",
          "description": "Text to display. A subset of markdown is supported (https://aka.ms/ACTextFeatures)"
        },
        "color": {
          "$ref": "#/definitions/Colors",
          "description": "Controls the color of `TextBlock` elements."
        },
        "fontType": {
          "$ref": "#/definitions/FontType",
          "description": "Type of font to use for rendering",
          "version": "1.2"
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment",
          "description": "Controls the horizontal text alignment."
        },
        "isSubtle": {
          "type": "boolean",
          "description": "If `true`, displays text slightly toned down to appear less prominent.",
          "default": false
        },
        "maxLines": {
          "type": "number",
          "description": "Specifies the maximum number of lines to display."
        },
        "size": {
          "$ref": "#/definitions/FontSize",
          "description": "Controls size of text."
        },
        "weight": {
          "$ref": "#/definitions/FontWeight",
          "description": "Controls the weight of `TextBlock` elements."
        },
        "wrap": {
          "type": "boolean",
          "description": "If `true`, allow text to wrap. Otherwise, text is clipped.",
          "default": false
        },
        "fallback": {},
        "height": {},
        "separator": {},
        "spacing": {},
        "id": {},
        "isVisible": {},
        "requires": {}
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.Element"
        }
      ]
    },
    "AssociatedInputs": {
      "anyOf": [
        {
          "enum": [
            "Auto",
            "None"
          ]
        },
        {
          "pattern": "^([a|A][u|U][t|T][o|O])|([n|N][o|O][n|N][e|E])$"
        }
      ]
    },
    "BlockElementHeight": {
      "anyOf": [
        {
          "enum": [
            "auto",
            "stretch"
          ]
        },
        {
          "pattern": "^([a|A][u|U][t|T][o|O])|([s|S][t|T][r|R][e|E][t|T][c|C][h|H])$"
        }
      ]
    },
    "ChoiceInputStyle": {
      "description": "Style hint for `Input.ChoiceSet`.",
      "anyOf": [
        {
          "enum": [
            "compact",
            "expanded"
          ]
        },
        {
          "pattern": "^([c|C][o|O][m|M][p|P][a|A][c|C][t|T])|([e|E][x|X][p|P][a|A][n|N][d|D][e|E][d|D])$"
        }
      ]
    },
    "Colors": {
      "anyOf": [
        {
          "enum": [
            "default",
            "dark",
            "light",
            "accent",
            "good",
            "warning",
            "attention"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([d|D][a|A][r|R][k|K])|([l|L][i|I][g|G][h|H][t|T])|([a|A][c|C][c|C][e|E][n|N][t|T])|([g|G][o|O][o|O][d|D])|([w|W][a|A][r|R][n|N][i|I][n|N][g|G])|([a|A][t|T][t|T][e|E][n|N][t|T][i|I][o|O][n|N])$"
        }
      ]
    },
    "ContainerStyle": {
      "anyOf": [
        {
          "enum": [
            "default",
            "emphasis",
            "good",
            "attention",
            "warning",
            "accent"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([e|E][m|M][p|P][h|H][a|A][s|S][i|I][s|S])|([g|G][o|O][o|O][d|D])|([a|A][t|T][t|T][e|E][n|N][t|T][i|I][o|O][n|N])|([w|W][a|A][r|R][n|N][i|I][n|N][g|G])|([a|A][c|C][c|C][e|E][n|N][t|T])$"
        }
      ]
    },
    "FallbackOption": {
      "anyOf": [
        {
          "enum": [
            "drop"
          ]
        },
        {
          "pattern": "^([d|D][r|R][o|O][p|P])$"
        }
      ]
    },
    "FontSize": {
      "anyOf": [
        {
          "enum": [
            "default",
            "small",
            "medium",
            "large",
            "extraLarge"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([s|S][m|M][a|A][l|L][l|L])|([m|M][e|E][d|D][i|I][u|U][m|M])|([l|L][a|A][r|R][g|G][e|E])|([e|E][x|X][t|T][r|R][a|A][l|L][a|A][r|R][g|G][e|E])$"
        }
      ]
    },
    "FontType": {
      "anyOf": [
        {
          "enum": [
            "default",
            "monospace"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([m|M][o|O][n|N][o|O][s|S][p|P][a|A][c|C][e|E])$"
        }
      ]
    },
    "FontWeight": {
      "anyOf": [
        {
          "enum": [
            "default",
            "lighter",
            "bolder"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([l|L][i|I][g|G][h|H][t|T][e|E][r|R])|([b|B][o|O][l|L][d|D][e|E][r|R])$"
        }
      ]
    },
    "HorizontalAlignment": {
      "description": "Controls how content is horizontally positioned within its container.",
      "anyOf": [
        {
          "enum": [
            "left",
            "center",
            "right"
          ]
        },
        {
          "pattern": "^([l|L][e|E][f|F][t|T])|([c|C][e|E][n|N][t|T][e|E][r|R])|([r|R][i|I][g|G][h|H][t|T])$"
        }
      ]
    },
    "ImageFillMode": {
      "anyOf": [
        {
          "enum": [
            "cover",
            "repeatHorizontally",
            "repeatVertically",
            "repeat"
          ]
        },
        {
          "pattern": "^([c|C][o|O][v|V][e|E][r|R])|([r|R][e|E][p|P][e|E][a|A][t|T][h|H][o|O][r|R][i|I][z|Z][o|O][n|N][t|T][a|A][l|L][l|L][y|Y])|([r|R][e|E][p|P][e|E][a|A][t|T][v|V][e|E][r|R][t|T][i|I][c|C][a|A][l|L][l|L][y|Y])|([r|R][e|E][p|P][e|E][a|A][t|T])$"
        }
      ]
    },
    "ImageSize": {
      "description": "Controls the approximate size of the image. The physical dimensions will vary per host. Every option preserves aspect ratio.",
      "anyOf": [
        {
          "enum": [
            "auto",
            "stretch",
            "small",
            "medium",
            "large"
          ]
        },
        {
          "pattern": "^([a|A][u|U][t|T][o|O])|([s|S][t|T][r|R][e|E][t|T][c|C][h|H])|([s|S][m|M][a|A][l|L][l|L])|([m|M][e|E][d|D][i|I][u|U][m|M])|([l|L][a|A][r|R][g|G][e|E])$"
        }
      ]
    },
    "ImageStyle": {
      "description": "Controls how this `Image` is displayed.",
      "anyOf": [
        {
          "enum": [
            "default",
            "person"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([p|P][e|E][r|R][s|S][o|O][n|N])$"
        }
      ]
    },
    "Spacing": {
      "description": "Specifies how much spacing. Hosts pick the exact pixel amounts for each of these.",
      "anyOf": [
        {
          "enum": [
            "default",
            "none",
            "small",
            "medium",
            "large",
            "extraLarge",
            "padding"
          ]
        },
        {
          "pattern": "^([d|D][e|E][f|F][a|A][u|U][l|L][t|T])|([n|N][o|O][n|N][e|E])|([s|S][m|M][a|A][l|L][l|L])|([m|M][e|E][d|D][i|I][u|U][m|M])|([l|L][a|A][r|R][g|G][e|E])|([e|E][x|X][t|T][r|R][a|A][l|L][a|A][r|R][g|G][e|E])|([p|P][a|A][d|D][d|D][i|I][n|N][g|G])$"
        }
      ]
    },
    "TextInputStyle": {
      "description": "Style hint for text input.",
      "anyOf": [
        {
          "enum": [
            "text",
            "tel",
            "url",
            "email"
          ]
        },
        {
          "pattern": "^([t|T][e|E][x|X][t|T])|([t|T][e|E][l|L])|([u|U][r|R][l|L])|([e|E][m|M][a|A][i|I][l|L])$"
        }
      ]
    },
    "VerticalAlignment": {
      "anyOf": [
        {
          "enum": [
            "top",
            "center",
            "bottom"
          ]
        },
        {
          "pattern": "^([t|T][o|O][p|P])|([c|C][e|E][n|N][t|T][e|E][r|R])|([b|B][o|O][t|T][t|T][o|O][m|M])$"
        }
      ]
    },
    "VerticalContentAlignment": {
      "anyOf": [
        {
          "enum": [
            "top",
            "center",
            "bottom"
          ]
        },
        {
          "pattern": "^([t|T][o|O][p|P])|([c|C][e|E][n|N][t|T][e|E][r|R])|([b|B][o|O][t|T][t|T][o|O][m|M])$"
        }
      ]
    },
    "BackgroundImage": {
      "description": "Specifies a background image. Acceptable formats are PNG, JPEG, and GIF",
      "properties": {
        "type": {
          "enum": [
            "BackgroundImage"
          ],
          "description": "Must be `BackgroundImage`"
        },
        "url": {
          "type": "string",
          "format": "uri-reference",
          "description": "The URL (or data url) of the image. Acceptable formats are PNG, JPEG, and GIF"
        },
        "fillMode": {
          "$ref": "#/definitions/ImageFillMode",
          "description": "Describes how the image should fill the area."
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment",
          "description": "Describes how the image should be aligned if it must be cropped or if using repeat fill mode."
        },
        "verticalAlignment": {
          "$ref": "#/definitions/VerticalAlignment",
          "description": "Describes how the image should be aligned if it must be cropped or if using repeat fill mode."
        }
      },
      "version": "1.2",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "url"
      ]
    },
    "ImplementationsOf.Item": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.OpenUrl"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.ShowCard"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.Submit"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.ToggleVisibility"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ActionSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Column"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ColumnSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Container"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/FactSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ImageSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.ChoiceSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Date"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Number"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Text"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Time"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Toggle"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Media"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/RichTextBlock"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/TextBlock"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.Action": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.OpenUrl"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.ShowCard"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.Submit"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.ToggleVisibility"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.ISelectAction": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.OpenUrl"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.Submit"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Action.ToggleVisibility"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.Element": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Container"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/FactSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/RichTextBlock"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/TextBlock"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.ToggleableItem": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ActionSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Column"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ColumnSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Container"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/FactSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Image"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/ImageSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.ChoiceSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Date"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Number"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Text"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Time"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Toggle"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Media"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/RichTextBlock"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/TextBlock"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.Inline": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/TextRun"
            }
          ]
        }
      ]
    },
    "ImplementationsOf.Input": {
      "anyOf": [
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.ChoiceSet"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Date"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Number"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Text"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Time"
            }
          ]
        },
        {
          "required": [
            "type"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/Input.Toggle"
            }
          ]
        }
      ]
    },
    "Extendable.Action": {
      "properties": {
        "title": {
          "type": "string",
          "description": "Label for button or link that represents this action."
        },
        "iconUrl": {
          "type": "string",
          "format": "uri-reference",
          "description": "Optional icon to be shown on the action in conjunction with the title. Supports data URI in version 1.2+",
          "version": "1.1"
        },
        "style": {
          "$ref": "#/definitions/ActionStyle",
          "description": "Controls the style of an Action, which influences how the action is displayed, spoken, etc.",
          "version": "1.2"
        },
        "fallback": {
          "anyOf": [
            {
              "$ref": "#/definitions/ImplementationsOf.Action"
            },
            {
              "$ref": "#/definitions/FallbackOption"
            }
          ],
          "description": "Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.",
          "version": "1.2"
        },
        "requires": {}
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.Item"
        }
      ]
    },
    "Extendable.Element": {
      "properties": {
        "fallback": {
          "anyOf": [
            {
              "$ref": "#/definitions/ImplementationsOf.Element"
            },
            {
              "$ref": "#/definitions/FallbackOption"
            }
          ],
          "description": "Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.",
          "version": "1.2"
        },
        "height": {
          "$ref": "#/definitions/BlockElementHeight",
          "description": "Specifies the height of the element.",
          "version": "1.1"
        },
        "separator": {
          "type": "boolean",
          "description": "When `true`, draw a separating line at the top of the element."
        },
        "spacing": {
          "$ref": "#/definitions/Spacing",
          "description": "Controls the amount of spacing between this element and the preceding element."
        },
        "id": {},
        "isVisible": {},
        "requires": {}
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.ToggleableItem"
        }
      ]
    },
    "Extendable.Input": {
      "description": "Base input class",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the value. Used to identify collected input when the Submit action is performed."
        },
        "errorMessage": {
          "type": "string",
          "description": "Error message to display when entered input is invalid",
          "version": "1.3"
        },
        "isRequired": {
          "type": "boolean",
          "description": "Whether or not this input is required",
          "version": "1.3"
        },
        "label": {
          "type": "string",
          "description": "Label for this input",
          "version": "1.3"
        },
        "fallback": {
          "anyOf": [
            {
              "$ref": "#/definitions/ImplementationsOf.Element"
            },
            {
              "$ref": "#/definitions/FallbackOption"
            }
          ],
          "description": "Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.",
          "version": "1.2"
        },
        "height": {
          "$ref": "#/definitions/BlockElementHeight",
          "description": "Specifies the height of the element.",
          "version": "1.1"
        },
        "separator": {
          "type": "boolean",
          "description": "When `true`, draw a separating line at the top of the element."
        },
        "spacing": {
          "$ref": "#/definitions/Spacing",
          "description": "Controls the amount of spacing between this element and the preceding element."
        },
        "isVisible": {
          "type": "boolean",
          "description": "If `false`, this item will be removed from the visual tree.",
          "default": true,
          "version": "1.2"
        },
        "requires": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A series of key/value pairs indicating features that the item requires with corresponding minimum version. When a feature is missing or of insufficient version, fallback is triggered.",
          "version": "1.2"
        }
      },
      "type": "object",
      "required": [
        "id"
      ]
    },
    "Extendable.Item": {
      "properties": {
        "requires": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A series of key/value pairs indicating features that the item requires with corresponding minimum version. When a feature is missing or of insufficient version, fallback is triggered.",
          "version": "1.2"
        }
      },
      "type": "object"
    },
    "Extendable.ToggleableItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier associated with the item."
        },
        "isVisible": {
          "type": "boolean",
          "description": "If `false`, this item will be removed from the visual tree.",
          "default": true,
          "version": "1.2"
        },
        "requires": {}
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Extendable.Item"
        }
      ]
    }
  },
  "anyOf": [
    {
      "allOf": [
        {
          "$ref": "#/definitions/AdaptiveCard"
        }
      ]
    }
  ]
}